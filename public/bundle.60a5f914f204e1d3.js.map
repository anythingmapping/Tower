{"version":3,"file":"bundle.60a5f914f204e1d3.js","mappings":"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","sources":["webpack:///./src/waypoints.js","webpack:///./src/placement_locations.js","webpack:///./src/enemy.js","webpack:///./src/placement_tile.js","webpack:///./src/projectile.js","webpack:///./src/building.js","webpack:///./src/app.js"],"sourcesContent":["export const waypoints = [{\n        \"x\": 1.34333840583513,\n        \"y\": 705.252663063441\n    },\n    {\n        \"x\": 408.374875373878,\n        \"y\": 686.445925381749\n    },\n    {\n        \"x\": 407.031536968043,\n        \"y\": 437.928320302252\n    },\n    {\n        \"x\": 53.7335362334051,\n        \"y\": 437.928320302251\n    },\n    {\n        \"x\": 55.0768746392402,\n        \"y\": 118.213779713491\n    },\n    {\n        \"x\": 428.524951461405,\n        \"y\": 120.900456525161\n    },\n    {\n        \"x\": 483.601826100645,\n        \"y\": 145.080547830193\n    },\n    {\n        \"x\": 623.309020307499,\n        \"y\": 158.513931888545\n    },\n    {\n        \"x\": 631.36905074251,\n        \"y\": 272.69769638453\n    },\n    {\n        \"x\": 765.702891326022,\n        \"y\": 272.697696384531\n    },\n    {\n        \"x\": 814.063073936086,\n        \"y\": 253.890958702839\n    },\n    {\n        \"x\": 818.199215716763,\n        \"y\": 146.911348924493\n    },\n    {\n        \"x\": 1175.42110510574,\n        \"y\": 135.677178989347\n    },\n    {\n        \"x\": 1170.04775148239,\n        \"y\": 304.937818124574\n    },\n    {\n        \"x\": 1035.71391089888,\n        \"y\": 308.967833342079\n    },\n    {\n        \"x\": 1037.05724930472,\n        \"y\": 505.095240594008\n    },\n    {\n        \"x\": 679.729233352574,\n        \"y\": 506.438578999842\n    },\n    {\n        \"x\": 679.729233352574,\n        \"y\": 707.939339875112\n    },\n    {\n        \"x\": 1092.13412394396,\n        \"y\": 705.252663063441\n    },\n    {\n        \"x\": 1360.80180511098,\n        \"y\": 699.879309440101\n    },\n    {\n        \"x\": 1360.80180511098,\n        \"y\": 701.222647845936\n    }\n]","export const placement_tiles_data = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0,\n    0, 0, 0, 14, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0,\n    0, 0, 0, 14, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0\n]","export class Enemy {\n    constructor(ctx, waypoints, { position = { x: 0, y: 0 } }) {\n        this.position = position;\n        this.width = 100;\n        this.ctx = ctx;\n        this.waypoints = waypoints;\n        this.height = 100;\n        this.waypoint_index = 0;\n        this.center = {\n            x: this.position.x + this.width / 2,\n            y: this.position.y + this.height / 2\n        };\n        this.radius = 50;\n        this.health = 100;\n        this.velocity = {\n            x: 0,\n            y: 0\n        }\n        this.image = new Image();\n        this.image.src = './orc.png';\n        this.frames_max = {\n            max: 7,\n            current: 0,\n            elapsed: 0,\n            hold: 2\n        };\n\n    }\n    draw() {\n        // this.ctx.fillStyle = 'red';\n        // this.ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n        const crop_width = this.image.width / this.frames_max.max;\n        const crop = {\n            position: {\n                x: crop_width * this.frames_max.current,\n                y: 0\n            },\n            width: crop_width,\n            height: this.image.height\n        }\n\n        this.ctx.drawImage(\n            this.image,\n            crop.position.x,\n            crop.position.y,\n            crop.width,\n            crop.height,\n            this.position.x,\n            this.position.y,\n            crop.width,\n            crop.height\n        );\n\n        this.frames_max.elapsed++;\n        if (this.frames_max.elapsed % this.frames_max.hold === 0) {\n            this.frames_max.current++;\n            if (this.frames_max.current > this.frames_max.max - 1) {\n                this.frames_max.current = 0;\n            }\n\n        };\n\n\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2);\n        // this.ctx.fillStyle = 'purple';\n        // this.ctx.fill();\n\n        // health bar\n        this.ctx.fillStyle = 'red';\n        this.ctx.fillRect(this.position.x, this.position.y - 15, this.width, 10)\n\n        this.ctx.fillStyle = 'green';\n        this.ctx.fillRect(\n            this.position.x,\n            this.position.y - 15,\n            (this.width * this.health) / 100,\n            10\n        )\n    };\n\n    update() {\n        this.draw();\n\n        /* ---------------------------------- speed --------------------------------- */\n        const waypoint = this.waypoints[this.waypoint_index]\n        const y_distance = waypoint.y - this.center.y;\n        const x_distance = waypoint.x - this.center.x;\n        const angle = Math.atan2(y_distance, x_distance);\n        const speed = 4;\n        this.velocity.x = Math.cos(angle) * speed;\n        this.velocity.y = Math.sin(angle) * speed;\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n\n        /* -------------------------------- waypoints ------------------------------- */\n        this.center = {\n            x: this.position.x + this.width / 2,\n            y: this.position.y + this.height / 2\n        }\n\n        if (\n            Math.abs(Math.round(this.center.x) - Math.round(waypoint.x)) < Math.abs(this.velocity.x) &&\n            Math.abs(Math.round(this.center.y) - Math.round(waypoint.y)) < Math.abs(this.velocity.y) &&\n            this.waypoint_index < this.waypoints.length - 1) {\n            this.waypoint_index++;\n        }\n    }\n}","export class Placement_tile {\n    constructor(ctx, { position = { x: 0, y: 0 } }) {\n        this.position = position;\n        this.ctx = ctx;\n        this.size = 64;\n\n    }\n\n    draw() {\n        this.ctx.fillStyle = this.color;\n        this.ctx.fillRect(this.position.x, this.position.y, this.size, this.size);\n    }\n\n    update(mouse) {\n        this.draw();\n\n        if (mouse.x > this.position.x &&\n            mouse.x < this.position.x + this.size &&\n            mouse.y > this.position.y &&\n            mouse.y < this.position.y + this.size\n        ) {\n            // console.log('collision')\n            this.color = 'white';\n        } else this.color = 'rgba(255,255,255,0.15)'\n\n\n    }\n};","export class Projectile {\n    constructor(ctx, { position = { x: 0, y: 0 }, enemy }) {\n        this.position = position;\n        this.velocity = {\n            x: 0,\n            y: 0\n        };\n        this.ctx = ctx;\n        this.enemy = enemy;\n        this.radius = 10;\n        this.image = new Image();\n        this.image.src = './projectile.png';\n    }\n\n    draw() {\n        this.ctx.drawImage(this.image, this.position.x, this.position.y);\n        // this.ctx.beginPath();\n        // this.ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2);\n        // this.ctx.fillStyle = 'orange';\n        // this.ctx.fill();\n    }\n\n    update() {\n        this.draw()\n\n        const angle = Math.atan2(\n            this.enemy.center.y - this.position.y,\n            this.enemy.center.x - this.position.x\n        )\n\n        const power = 5\n        this.velocity.x = Math.cos(angle) * power;\n        this.velocity.y = Math.sin(angle) * power;\n\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n    }\n}","import { Projectile } from \"./projectile\";\nexport class Building {\n    constructor(ctx, { position = { x: 0, y: 0 } }) {\n        this.position = position;\n        this.ctx = ctx;\n        this.position = position;\n        this.width = 64 * 2;\n        this.height = 64;\n        this.center = {\n            x: this.position.x + (this.width / 4),\n            y: this.position.y + this.height / 2\n        };\n        this.projectiles = [];\n        this.radius = 250;\n        this.target;\n        this.frames = 0;\n    };\n\n    draw() {\n        this.ctx.fillStyle = 'blue';\n        this.ctx.fillRect(this.position.x, this.position.y, 64, 64);\n\n        this.ctx.beginPath()\n        this.ctx.arc(this.center.x, this.center.y, this.radius, 0, Math.PI * 2);\n        this.ctx.fillStyle = 'rgba(0,0,255,0.21)';\n        this.ctx.fill()\n    };\n\n    update() {\n        this.draw()\n        if (this.frames % 100 === 0 && this.target) {\n            this.projectiles.push(\n                new Projectile(this.ctx, {\n                    position: {\n                        x: this.center.x,\n                        y: this.center.y\n                    },\n                    enemy: this.target\n                })\n            );\n        }\n        this.frames++;\n\n    };\n\n}","import { waypoints } from \"./waypoints\";\nimport { placement_tiles_data } from \"./placement_locations\";\n\nimport { Enemy } from \"./enemy\";\nimport { Placement_tile } from \"./placement_tile\";\nimport { Building } from \"./building\";\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\nctx.fillStyle = 'white';\nctx.fillRect(0, 2, canvas.width, canvas.height);\n\nconst image = new Image();\nimage.onload = () => {\n    animate();\n};\n\nimage.src = 'map.png';\n\n\n\n\n/* ----------------------------- Placement tiles ---------------------------- */\nconst placement_tiles_data_2D = []\n\nfor (let i = 0; i < placement_tiles_data.length; i += 20) {\n    placement_tiles_data_2D.push(placement_tiles_data.slice(i, i + 20));\n}\n// console.log(placement_tiles_data_2D)\n\n\n\n\n/* ------------------------ Tile placement for player ----------------------- */\nconst placement_tiles = []\nplacement_tiles_data_2D.forEach((row, y) => {\n    row.forEach((symbol, x) => {\n        if (symbol === 14) {\n            // add building placement tile here\n            placement_tiles.push(\n                new Placement_tile(ctx, {\n                    position: {\n                        x: x * 64,\n                        y: y * 64,\n                    }\n                })\n            )\n        }\n    });\n});\n// console.log(placement_tiles)\n\n\n\n/* ---------------------------  Sprint Creation --------------------------- */\nconst enemies = []\nlet active_tile = undefined;\nlet enemy_count = 3;\nlet hearts = 10;\nlet coins = 100;\nconst buildings = [];\n\nfunction spawn_enemies(spawn_count) {\n    for (let i = 1; i < spawn_count + 1; i++) {\n        const x_offset = i * 150;\n        enemies.push(new Enemy(ctx, waypoints, { position: { x: waypoints[0].x - x_offset, y: waypoints[0].y } }));\n    }\n}\n\nspawn_enemies(1)\n    // console.log('enemies');\n    // console.log(enemies);\n\n\n\n\n\n/* -------------------------------------------------------------------------- */\n/*                               Animation loop                               */\n/* -------------------------------------------------------------------------- */\nfunction animate() {\n    const animationID = requestAnimationFrame(animate);\n\n    ctx.drawImage(image, 0, 0);\n\n    /* ------------------------------ enemy sprites ----------------------------- */\n    for (let i = enemies.length - 1; i >= 0; i--) {\n        const enemy = enemies[i]\n        enemy.update()\n\n        if (enemy.position.x > canvas.width) {\n            enemies.splice(i, 1);\n            hearts -= 1;\n            document.querySelector('#hearts').innerHTML = hearts;\n\n            if (hearts <= 0) {\n                console.log('game over');\n                cancelAnimationFrame(animationID);\n                document.querySelector('#gameOver').style.display = 'flex';;\n            }\n\n            // console.log(hearts);\n            // console.log(enemies);\n            // console.log('hit point');\n        }\n    }\n\n\n\n    /* -------------------- spawning waves -------------------- */\n    if (enemies.length === 0) {\n        spawn_enemies(enemy_count);\n        enemy_count += 2;\n    };\n\n    /* ----------------------------- placement_tiles ---------------------------- */\n    placement_tiles.forEach(tile => {\n        tile.update(mouse);\n    });\n\n    /* ------------------------ buildings and projectiles ----------------------- */\n    buildings.forEach(building => {\n        building.update()\n        building.target = null;\n        const validEnemies = enemies.filter((enemy) => {\n            const xDifference = enemy.center.x - building.center.x\n            const yDifference = enemy.center.y - building.center.y\n            const distance = Math.hypot(xDifference, yDifference)\n            return distance < enemy.radius + building.radius\n        })\n        building.target = validEnemies[0]\n\n        for (let i = building.projectiles.length - 1; i >= 0; i--) {\n            const projectile = building.projectiles[i]\n\n            projectile.update()\n\n            const xDifference = projectile.enemy.center.x - projectile.position.x\n            const yDifference = projectile.enemy.center.y - projectile.position.y\n            const distance = Math.hypot(xDifference, yDifference)\n\n            /* ---------------------- projectile hitting the enemy ---------------------- */\n            if (distance < projectile.enemy.radius + projectile.radius) {\n                projectile.enemy.health -= 20;\n                if (projectile.enemy.health <= 0) {\n                    const enemyIndex = enemies.findIndex((enemy) => {\n                        return projectile.enemy === enemy\n                    });\n                    if (enemyIndex > -1) {\n                        enemies.splice(enemyIndex, 1);\n                        coins += 25;\n                        document.querySelector('#coins').innerHTML = coins;\n                    }\n                }\n\n\n\n                // console.log(projectile.enemy.health)\n                building.projectiles.splice(i, 1)\n            }\n        }\n\n    })\n}\n\nconst mouse = {\n    x: undefined,\n    y: undefined\n};\n\n/* -------------------------------------------------------------------------- */\n/*                               event listener                               */\n/* -------------------------------------------------------------------------- */\n\ncanvas.addEventListener('click', (event) => {\n    if (active_tile && !active_tile.isOccupied && coins - 50 >= 0) {\n        coins -= 50;\n        document.querySelector('#coins').innerHTML = coins;\n        buildings.push(new Building(ctx, {\n            position: {\n                x: active_tile.position.x,\n                y: active_tile.position.y\n            }\n        }));\n        active_tile.isOccupied = true;\n    }\n\n})\n\nwindow.addEventListener('mousemove', (event) => {\n    mouse.x = event.clientX;\n    mouse.y = event.clientY;\n\n    active_tile = null;\n    for (let i = 0; i < placement_tiles.length; i++) {\n        const tile = placement_tiles[i];\n        if (\n            mouse.x > tile.position.x &&\n            mouse.x < tile.position.x + tile.size &&\n            mouse.y > tile.position.y &&\n            mouse.y < tile.position.y + tile.size\n        ) {\n            active_tile = tile;\n            break;\n        }\n    }\n    // console.log(active_tile)\n})"],"names":["waypoints","placement_tiles_data","Enemy","constructor","ctx","position","x","y","this","width","height","waypoint_index","center","radius","health","velocity","image","Image","src","frames_max","max","current","elapsed","hold","draw","crop_width","crop","drawImage","fillStyle","fillRect","update","waypoint","y_distance","x_distance","angle","Math","atan2","cos","sin","abs","round","length","Placement_tile","size","color","mouse","Projectile","enemy","Building","projectiles","target","frames","beginPath","arc","PI","fill","push","canvas","document","querySelector","getContext","onload","animate","placement_tiles_data_2D","i","slice","placement_tiles","forEach","row","symbol","enemies","active_tile","enemy_count","hearts","coins","buildings","spawn_enemies","spawn_count","x_offset","animationID","requestAnimationFrame","splice","innerHTML","console","log","cancelAnimationFrame","style","display","tile","building","validEnemies","filter","xDifference","yDifference","hypot","projectile","enemyIndex","findIndex","undefined","addEventListener","event","isOccupied","window","clientX","clientY"],"sourceRoot":""}